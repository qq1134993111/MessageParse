
#include"MessageEncoder.h"
#include"MessageDecoder.h"
#include"ArrayUtil.h"

#include"{{MSG_NAME}}.h"

{% if length(NAMESPACE) > 0 %}
## for NAME in NAMESPACE
namespace {{NAME}}
{
## endfor
{% endif %}

  ///<{{MSG_NAME}} {{MSG_PKT_NO}} {{MSG_DESCRIPTION}}
  void {{MSG_NAME}}::FillDefaultValue()
  {
    {% if MSG_INHERIT !="" %}
      {{MSG_INHERIT}}::FillDefaultValue();
    {% endif %}
    {% if exists("FIELDS") %}
## for FIELD in FIELDS
    {% if FIELD.F_FILED_TYPE==0 %}  {# 基本字段 #}
      {% if FIELD.F_TYPE_INFO.T_PRIMITIVE_TYPE=="STRING"  %}
      //{{ FIELD.F_NAME }} = ""; ///<{{ FIELD.F_DESCRIPTION }}
      {% endif %}
      {% if FIELD.F_TYPE_INFO.T_PRIMITIVE_TYPE=="FIXARRAY"  %}
      {{ FIELD.F_NAME }}.fill(' '); ///<{{ FIELD.F_DESCRIPTION }}
      {% endif %}
      {% if FIELD.F_TYPE_INFO.T_PRIMITIVE_TYPE in ["UCHAR","INT16","UINT16","INT8","UINT8","INT32","UINT32","INT64","UINT64"] %}
      {{ FIELD.F_NAME }} = 0; ///<{{ FIELD.F_DESCRIPTION }}
      {% endif %}
      {% if FIELD.F_TYPE_INFO.T_NAME=="CHAR"  %}
      {{ FIELD.F_NAME }} = ' '; ///<{{ FIELD.F_DESCRIPTION }}
      {% endif %}
      {% if FIELD.F_TYPE_INFO.T_NAME=="BOOL" %}
      {{ FIELD.F_NAME }} = false; ///<{{ FIELD.F_DESCRIPTION }}
      {% endif %}
    {% endif %}
    {# 循环信息注释 {{ loop.index1 }}，{{ loop.index }}, {{ loop.is_first }},{{ loop.is_last }}    #}
    {% if FIELD.F_FILED_TYPE==1 %} {# 序列 #}
      //{{ FIELD.F_NAME }}.clear(); ///<{{ FIELD.F_DESCRIPTION }}
    {% endif %}
## endfor
    {% endif %}
  } ///<end {{MSG_NAME}} FillDefaultValue

  uint32_t {{MSG_NAME}}::GetMsgSize() 
  {
      uint32_t msg_size = 0;
    {% if MSG_INHERIT !="" %}
      msg_size += {{MSG_INHERIT}}::GetMsgSize();
    {% endif %}
    {% if exists("FIELDS") %}
## for FIELD in FIELDS
    {% if FIELD.F_FILED_TYPE == 0 %}  {# 基本字段 #}
      {% if FIELD.F_TYPE_INFO.T_PRIMITIVE_TYPE == "STRING" %}
      msg_size += 4 + static_cast<uint32_t>({{FIELD.F_NAME}}.size());///<{{ FIELD.F_DESCRIPTION }}
      {% endif %}
      {% if FIELD.F_TYPE_INFO.T_PRIMITIVE_TYPE == "FIXARRAY"  %}
      msg_size += {{FIELD.F_TYPE_INFO.T_LENGTH}};///<{{FIELD.F_NAME}}.size() {{ FIELD.F_DESCRIPTION }}
      {% endif %}
      {% if FIELD.F_TYPE_INFO.T_PRIMITIVE_TYPE in ["BOOL","CHAR","UCHAR","INT8","UINT8","INT16","UINT16","INT32","UINT32","INT64","UINT64"] %}
      msg_size += {{FIELD.F_TYPE_INFO.T_LENGTH}};///< sizeof({{ FIELD.F_NAME }})//{{ FIELD.F_DESCRIPTION }}
      {% endif %}
    {% endif %}
    {# 循环信息注释 {{ loop.index1 }}，{{ loop.index }}, {{ loop.is_first }},{{ loop.is_last }} #}
    {% if FIELD.F_FILED_TYPE == 1 %} {# 序列 #}
      ///<{{ FIELD.F_DESCRIPTION }}
      msg_size += 4 ; 
      {% if FIELD.F_TYPE_INFO.T_PRIMITIVE_TYPE == "STRING" %}
      for(auto& item : {{ FIELD.F_NAME }})
      {
          msg_size += 4 + static_cast<uint32_t>(item.size());
      }
      {% endif %}
      {% if FIELD.F_TYPE_INFO.T_PRIMITIVE_TYPE in ["BOOL","CHAR","UCHAR","INT8","UINT8","INT16","UINT16","INT32","UINT32","INT64","UINT64","FIXARRAY"] %}
      msg_size += static_cast<uint32_t>({{ FIELD.F_NAME }}.size()) * {{FIELD.F_TYPE_INFO.T_LENGTH}}; 
      {% endif %}
      {% if not FIELD.F_TYPE_INFO.T_PRIMITIVE_TYPE in ["BOOL","CHAR","UCHAR","INT8","UINT8","INT16","UINT16","INT32","UINT32","INT64","UINT64","FIXARRAY","STRING"]  %}
      for(auto& item : {{ FIELD.F_NAME }})
      {
          msg_size += item.GetMsgSize();
      }
      {% endif %}
    {% endif %}
## endfor
    {% endif %}
      return msg_size;

  }///<end {{MSG_NAME}} GetMsgSize

  mp::ErrorCode {{MSG_NAME}}::Decode(mp::MessageDecoder& decoder)
  {
      mp::ErrorCode ec=mp::ErrorCode::kSuccess;
    {% if MSG_INHERIT !="" %}
      ec = {{MSG_INHERIT}}::Decode(decoder);
      if (ec != mp::ErrorCode::kSuccess) return ec;
    {% endif %}
    {% if exists("FIELDS") %}
## for FIELD in FIELDS
    {% if FIELD.F_FILED_TYPE == 0 %}  {# 基本字段 #}
      {% if FIELD.F_TYPE_INFO.T_PRIMITIVE_TYPE == "STRING" %}
      uint32_t size_{{ lower(FIELD.F_NAME) }} = 0; ///<{{ FIELD.F_NAME }}数组大小
      ec = decoder.Read(size_{{ lower(FIELD.F_NAME) }});
      if (ec != mp::ErrorCode::kSuccess) return ec;
      {{ FIELD.F_NAME }}.resize(size_{{ lower(FIELD.F_NAME) }}); 
      ec = decoder.Read({{ FIELD.F_NAME }}.data(),{{ FIELD.F_NAME }}.size());///<{{ FIELD.F_DESCRIPTION }}
      if (ec != mp::ErrorCode::kSuccess) return ec;
      {% endif %}
      {% if FIELD.F_TYPE_INFO.T_PRIMITIVE_TYPE != "STRING" %}
      ec = decoder.Read({{ FIELD.F_NAME }}); ///<{{ FIELD.F_DESCRIPTION }}
      if (ec != mp::ErrorCode::kSuccess) return ec;
      {% endif %}
    {% endif %}
    {% if FIELD.F_FILED_TYPE == 1 %} {# 序列 #}
      {% if FIELD.F_TYPE_INFO.T_PRIMITIVE_TYPE == "STRING" %}
      uint32_t size_{{ lower(FIELD.F_NAME) }} = 0; ///<{{ FIELD.F_NAME }}数组大小
      ec = decoder.Read(size_{{ lower(FIELD.F_NAME) }});
      if (ec != mp::ErrorCode::kSuccess) return ec;
      for(auto i=0; i<size_{{ lower(FIELD.F_NAME) }}; i++) ///<{{ FIELD.F_DESCRIPTION }}
      {
          uint32_t item_size = 0;
          ec = decoder.Read(item_size);
          if (ec != mp::ErrorCode::kSuccess) return ec;
          {{FIELD.F_PRIMITIVE_TYPE}} item;
          item.resize(item_size);
          ec = decoder.Read(item.data(), item.size());
          if (ec != mp::ErrorCode::kSuccess) return ec;
          {{FIELD.F_NAME}}.push_back(item);
      }
      {% endif %}
      {% if FIELD.F_TYPE_INFO.T_PRIMITIVE_TYPE in ["BOOL","CHAR","UCHAR","INT8","UINT8","INT16","UINT16","INT32","UINT32","INT64","UINT64","FIXARRAY"] %}
      uint32_t size_{{ lower(FIELD.F_NAME) }} = 0; ///<{{ FIELD.F_NAME }}数组大小
      ec = decoder.Read(size_{{ lower(FIELD.F_NAME) }});
      if (ec != mp::ErrorCode::kSuccess) return ec;
      for(auto i=0; i<size_{{ lower(FIELD.F_NAME) }}; i++) ///<{{ FIELD.F_DESCRIPTION }}
      {
          {{FIELD.F_PRIMITIVE_TYPE}} item;
          ec = decoder.Read(item);
          if (ec != mp::ErrorCode::kSuccess) return ec;
          {{FIELD.F_NAME}}.push_back(item);
      }
      {% endif %}
      {% if not FIELD.F_TYPE_INFO.T_PRIMITIVE_TYPE in ["BOOL","CHAR","UCHAR","INT8","UINT8","INT16","UINT16","INT32","UINT32","INT64","UINT64","FIXARRAY","STRING"]  %}
      uint32_t size_{{ lower(FIELD.F_NAME) }} = 0; ///<{{ FIELD.F_NAME }}数组大小
      ec = decoder.Read(size_{{ lower(FIELD.F_NAME) }});
      if (ec != mp::ErrorCode::kSuccess) return ec;
      for(auto i=0; i<size_{{ lower(FIELD.F_NAME) }}; i++) ///<{{ FIELD.F_DESCRIPTION }}
      {
          {{FIELD.F_PRIMITIVE_TYPE}} item;
          ec=item.Decode(decoder);
          if(ec!=mp::ErrorCode::kSuccess) return ec;
          {{FIELD.F_NAME}}.push_back(item);
      }
      {% endif %}
    {% endif %}
## endfor
     {% endif %}
      return ec;
  } ///<end of {{MSG_NAME}} Decode
   
  mp::ErrorCode {{MSG_NAME}}::Encode(mp::MessageEncoder& encoder)
  {
      mp::ErrorCode ec=mp::ErrorCode::kSuccess;
    {% if MSG_INHERIT !="" %}
      ec = {{MSG_INHERIT}}::Encode(encoder);
      if (ec != mp::ErrorCode::kSuccess) return ec;
    {% endif %}
    {% if exists("FIELDS") %}
## for FIELD in FIELDS
    {% if FIELD.F_FILED_TYPE==0 %}  {# 基本字段 #}
      {% if FIELD.F_TYPE_INFO.T_PRIMITIVE_TYPE=="STRING"  %}
      ec = encoder.Write(static_cast<uint32_t>({{ FIELD.F_NAME }}.size())); ///<{{ FIELD.F_DESCRIPTION }}
      if (ec != mp::ErrorCode::kSuccess) return ec;
      ec = encoder.Write({{ FIELD.F_NAME }}.data(), {{ FIELD.F_NAME }}.size());
      {% endif %}
      {% if FIELD.F_TYPE_INFO.T_PRIMITIVE_TYPE!="STRING" %}
      ec = encoder.Write({{ FIELD.F_NAME }}); ///<{{ FIELD.F_DESCRIPTION }}
      if (ec != mp::ErrorCode::kSuccess) return ec;
      {% endif %}
    {% endif %}
    {% if FIELD.F_FILED_TYPE==1 %} {# 序列 #}
      {% if FIELD.F_TYPE_INFO.T_PRIMITIVE_TYPE == "STRING" %}
      ec = encoder.Write(static_cast<uint32_t>({{ FIELD.F_NAME }}.size())); ///<{{ FIELD.F_DESCRIPTION }}
      if (ec != mp::ErrorCode::kSuccess) return ec;
      for(auto& item : {{ FIELD.F_NAME }})
      {
          ec = encode.Encode(static_cast<uint32_t>(item.size()));
          if (ec != mp::ErrorCode::kSuccess) return ec;
          ec = encode.Encode(item.data(), item.size());
          if (ec != mp::ErrorCode::kSuccess) return ec;
       }
      {% endif %}
      {% if FIELD.F_TYPE_INFO.T_PRIMITIVE_TYPE in ["BOOL","CHAR","UCHAR","INT16","UINT16","INT8","UINT8","INT32","UINT32","INT64","UINT64","FIXARRAY"] %}
      ec = encoder.Write(static_cast<uint32_t>({{ FIELD.F_NAME }}.size())); ///<{{ FIELD.F_DESCRIPTION }}
      if (ec != mp::ErrorCode::kSuccess) return ec;
      for(auto& item : {{ FIELD.F_NAME }})
      {
          ec = encoder.Write(item);
          if(ec!=mp::ErrorCode::kSuccess) return ec;
      }
      {% endif %}
      {% if not FIELD.F_TYPE_INFO.T_PRIMITIVE_TYPE in ["BOOL","CHAR","UCHAR","INT8","UINT8","INT16","UINT16","INT32","UINT32","INT64","UINT64","FIXARRAY","STRING"]  %}
      ec = encoder.Write(static_cast<uint32_t>({{ FIELD.F_NAME }}.size())); ///<{{ FIELD.F_DESCRIPTION }}
      if (ec != mp::ErrorCode::kSuccess) return ec;
      for(auto& item : {{ FIELD.F_NAME }})
      {
          ec = item.Encode(encoder);
          if (ec != mp::ErrorCode::kSuccess) return ec;
       }
      {% endif %}
    {% endif %}
## endfor
    {% endif %}
      return ec;
  } ///<end of {{MSG_NAME}} Encode
   
  void {{MSG_NAME}}::Dump(std::ostream& ostream) 
  {
      ostream << "[{{MSG_NAME}}]" << "[{{MSG_PKT_NO}}]:";
    {% if MSG_INHERIT !="" %}
      {{MSG_INHERIT}}::Dump(ostream);
    {% endif %}  
    {% if exists("FIELDS") %}
## for FIELD in FIELDS
    {# 注释调试 {{FIELD}} #}
    {% if FIELD.F_FILED_TYPE == 0 %}  {# 基本字段 #}
      {% if FIELD.F_TYPE_INFO.T_PRIMITIVE_TYPE == "FIXARRAY" %}
      ostream << "{{FIELD.F_NAME}}:" <<mp::ToStringTrim({{ FIELD.F_NAME }}); ///<{{ FIELD.F_DESCRIPTION }}
      {% endif %}
      {% if FIELD.F_TYPE_INFO.T_PRIMITIVE_TYPE != "FIXARRAY" %}
      ostream << "{{ FIELD.F_NAME }}:" << {{ FIELD.F_NAME }}; ///<{{ FIELD.F_DESCRIPTION }}
      {% endif %}
      {%if not loop.is_last  %}
      ostream << "|"; 
      {% endif %}
	{% endif %}
    {% if FIELD.F_FILED_TYPE==1 %} {# 序列 #}
      ostream << "{{ FIELD.F_NAME }}" << " size: " << {{ FIELD.F_NAME }}.size() << "[" ;
      for(auto& item : {{ FIELD.F_NAME }}) ///<{{ FIELD.F_DESCRIPTION }}
      {
          {% if FIELD.F_TYPE_INFO.T_PRIMITIVE_TYPE == "FIXARRAY" %}
          ostream << "{{FIELD.F_NAME}} item:" << mp::ToStringTrim(item) << ","; 
          {% endif %}
          {% if FIELD.F_TYPE_INFO.T_PRIMITIVE_TYPE in ["BOOL","CHAR","UCHAR","INT16","UINT16","INT8","UINT8","INT32","UINT32","INT64","UINT64","STRING"] %}
          ostream << "{{FIELD.F_NAME}} item:" << item << ",";
          {% endif %}
          {% if not FIELD.F_TYPE_INFO.T_PRIMITIVE_TYPE in ["BOOL","CHAR","UCHAR","INT8","UINT8","INT16","UINT16","INT32","UINT32","INT64","UINT64","FIXARRAY","STRING"]  %}
          item.Dump(ostream);
          ostream << ",";
          {% endif %}
      }
      ostream<<"]";
      {%if not loop.is_last  %}
      ostream << "|"; 
      {% endif %}
    {% endif %}
## endfor
    {% endif %}
  } ///<end of {{MSG_NAME}} Dump

{% if length(NAMESPACE) > 0 %}
## for NAME in NAMESPACE
} ///<end of namespace {{NAME}}
## endfor
{% endif %}