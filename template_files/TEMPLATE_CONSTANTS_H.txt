
#pragma once
#include"Types.h"

#include"ArrayUtil.h"

{% if length(NAMESPACE) > 0 %}
## for NAME in NAMESPACE
namespace {{NAME}}
{
## endfor
{% endif %}

## for CONSTANT in CONSTANTS
  {#{CONSTANT}#}
  /** 
  * @brief {{CONSTANT.CONST_NAME}} 
  *        {{CONSTANT.CONST_DESCRIPTION}}
  */
  class {{CONSTANT.CONST_NAME}}  
  {
    public:
      {#{CONSTANT}#}
      bool IsValid(const {{RevisedType(CONSTANT.CONST_PRIMITIVE_TYPE,CONSTANT.CONST_LENGTH)}}& value);
## for FIELD in CONSTANT.FIELDS
      {#{FIELD}#}
      {% if FIELD.F_TYPE_INFO.T_PRIMITIVE_TYPE=="FIXARRAY" %}
      inline static {{RevisedType(FIELD.F_PRIMITIVE_TYPE,FIELD.F_LENGTH)}} k{{FIELD.F_NAME}} = mp::ToArray<{{FIELD.F_TYPE_INFO.T_LENGTH}}>("{{FIELD.F_VALUE}}"); //{{FIELD.F_DESCRIPTION}}
      {% endif %}
      {% if FIELD.F_TYPE_INFO.T_PRIMITIVE_TYPE=="STRING" %}
      inline static {{RevisedType(FIELD.F_PRIMITIVE_TYPE,FIELD.F_LENGTH)}} k{{FIELD.F_NAME}} = "{{FIELD.F_VALUE}}"; ///<{{FIELD.F_DESCRIPTION}}
      {% endif %}
      {% if FIELD.F_TYPE_INFO.T_PRIMITIVE_TYPE!="FIXARRAY" and FIELD.F_TYPE_INFO.T_PRIMITIVE_TYPE!="STRING" %}
      inline static {{RevisedType(FIELD.F_PRIMITIVE_TYPE,FIELD.F_LENGTH)}} k{{FIELD.F_NAME}} = {{FIELD.F_VALUE}}; ///<{{FIELD.F_DESCRIPTION}}
      {% endif %}
## endfor

  }; ///<end of class {{CONSTANT.CONST_NAME}} 

## endfor

{% if length(NAMESPACE) > 0 %}
## for NAME in NAMESPACE
} ///<end of namespace {{NAME}}
## endfor
{% endif %}