
#pragma once

#include"AutoFactory.h"
//#include"MpCustomKey.h"
#include"MessageBase.h"
#include"MpTypes.h"

{% if length(NAMESPACE) > 0 %}
## for NAME in NAMESPACE
namespace {{NAME}}
{
## endfor
{% endif %}

//struct {{FILENAME}}{};
//using {{FILENAME}}MessageFactory = mp::factory<MpCustomKey<{{FILENAME}}>, mp::MessageBase>;

using {{FILENAME}}MessageFactory = mp::factory<mp::MsgType_Def , mp::MessageBase>;

#define REGIST_{{upper(FILENAME)}}_MESSAGE(msg_no,MESSAGE) static {{FILENAME}}MessageFactory::register_t<MESSAGE> s_##MESSAGE##msg_no(msg_no);
#define CREATE_{{upper(FILENAME)}}_MESSAGE(msg_no) {{FILENAME}}MessageFactory::get().create(msg_no);

{% if length(NAMESPACE) > 0 %}
## for NAME in NAMESPACE
} ///<end of namespace {{NAME}}
## endfor
{% endif %}