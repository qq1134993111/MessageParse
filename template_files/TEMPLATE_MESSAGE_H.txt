
#pragma once

#include<vector>
#include"TypesDefinition.h"
#include"MessageTypesDefinition.h"

{% if MSG_INHERIT == "" %}
#include"MessageBase.h"
{% endif %}
{% if MSG_INHERIT != "" %}
#include"{{MSG_INHERIT}}.h"
{% endif %}
## for FIELD in FIELDS
    {#{ FIELD }#}
    {% if FIELD.F_FILED_TYPE == 1 and not FIELD.F_TYPE_INFO.T_PRIMITIVE_TYPE in ["BOOL","CHAR","UCHAR","INT16","UINT16","INT8","UINT8","INT32","UINT32","INT64","UINT64","STRING","FIXARRAY"] %}
#include"{{ FIELD.F_PRIMITIVE_TYPE }}.h"
    {% endif %}
## endfor

{% if length(NAMESPACE) > 0 %}
## for NAME in NAMESPACE
namespace {{NAME}}
{
## endfor
{% endif %}

  /**
  * @brief {{MSG_NAME}}
  *  {{MSG_PKT_NO}} {{MSG_DESCRIPTION}}
  */
  class {{MSG_NAME}} : public {% if MSG_INHERIT!="" %} {{MSG_INHERIT}} 
  {% endif %} {% if  MSG_INHERIT=="" %} mp::MessageBase 
  {% endif %}
  {
    public:
      {{MSG_NAME}}(){}
      ~{{MSG_NAME}}(){}
      virtual void FillDefaultValue() override;
      virtual mp::MsgType_Def GetMsgType() override 
      { 
          ///<{{MSG_PKT_NO}} {{MSG_DESCRIPTION}}
          return {% if MSG_PKT_NO !=0 %}k{{MSG_NAME}}{% endif %}{% if MSG_PKT_NO == 0 %}0{% endif %};
      }
      virtual uint32_t GetMsgSize() override;
      virtual mp::ErrorCode Decode(mp::MessageDecoder& decoder) override;
      virtual mp::ErrorCode Encode(mp::MessageEncoder& encoder) override;
      virtual void Dump(std::ostream& ostream) override;
    public:
    {% if exists("FIELDS") %}
## for FIELD in FIELDS
    {% if FIELD.F_FILED_TYPE==0 %}  {# 基本字段 #}
      {{ RevisedType(FIELD.F_PRIMITIVE_TYPE,FIELD.F_LENGTH) }} {{ FIELD.F_NAME }}; ///<{{ FIELD.F_DESCRIPTION }}
    {% endif %}
    {# 循环信息注释 {{ loop.index1 }}，{{ loop.index }}, {{ loop.is_first }},{{ loop.is_last }}    #}
    {% if FIELD.F_FILED_TYPE==1 %} {# 序列 #}
      std::vector<{{ RevisedType(FIELD.F_PRIMITIVE_TYPE,FIELD.F_LENGTH) }}> {{ FIELD.F_NAME }}; ///<{{ FIELD.F_DESCRIPTION }}
    {% endif %}
## endfor
    {% endif %}
  }; ///< end of class {{MSG_NAME}}

{% if length(NAMESPACE) > 0 %}
## for NAME in NAMESPACE
} ///< end of namespace {{NAME}}
## endfor
{% endif %}
